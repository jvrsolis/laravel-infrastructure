AWSTemplateFormatVersion: "2010-09-09"
Description: The virtual private network infrastructure for all of the application
Parameters:
  StackKey:
    Type: String
    Description: The stack key that will identify the infrastructure
    Default: laravel
  Environment:
    Type: String
    Description: The identifier to use for the stacks. Should be the same across all templates (staging, production, testing..)
    Default: staging
    AllowedValues:
      - production
      - staging
      - testing
      - local
  CidrBlock:
        Description: Please enter the IP range (CIDR notation) for this VPC
        Type: String
        Default: 10.0.0.0/16
  PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
        Type: String
        Default: 10.0.1.0/24
  PublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
        Type: String
        Default: 10.0.2.0/24
  PublicSubnet3CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the third Availability Zone
        Type: String
        Default: 10.0.3.0/24
  PrivateSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
        Type: String
        Default: 10.0.11.0/24
  PrivateSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
        Type: String
        Default: 10.0.12.0/24
  PrivateSubnet3CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the third Availability Zone
        Type: String
        Default: 10.0.13.0/24
  SubnetZone1:
    Type: "AWS::EC2::AvailabilityZone::Name"
  SubnetZone2:
    Type: "AWS::EC2::AvailabilityZone::Name"
  SubnetZone3:
    Condition: isProduction
    Type: "AWS::EC2::AvailabilityZone::Name"
  JumpBoxKeyName:
    Description: The SSH key pair to use for instance
    Type: AWS::EC2::KeyPair::KeyName
  JumpBoxInstanceType:
    Description: The instance type to use for the jump box
    Type: "String"
    Default: "t3.nano"

Mappings:
  AWSRegionToAMI:
    us-east-1:
      jump: ami-040d909ea4e56f8f3
    us-east-2:
      jump: ami-09ce6553a7f2ae75d
    us-west-1:
      jump: ami-091c5e73d3a79e85e
    us-west-2:
      jump: ami-02c6f7952af6bd632

Conditions:
  isProduction: !Equals [!Ref Environment, production]

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: System Configuration
        Parameters:
          - Environment
      - Label:
          default: Infrastructure
        Parameters:
          - SubnetZone1
          - SubnetZone2
          - SubnetZone3

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref CidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${StackKey}-${Environment}-vpc
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${StackKey}-${Environment}-internet-gateway

  InternetGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  NATIP1:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${StackKey}-${Environment}-elastic-ip-1
   
   NATIP2:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${StackKey}-${Environment}-elastic-ip-2
  
  NATIP3:
    Type: "AWS::EC2::EIP"
    Condition: isProduction
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${StackKey}-${Environment}-elastic-ip-3

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref SubnetZone1
      CidrBlock: !Ref PublicSubnet1CIDR
      Tags:
        - Key: Name
          Value: !Sub ${StackKey}-${Environment}-public-subnet-1

  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref SubnetZone2
      CidrBlock: !Ref PublicSubnet2CIDR
      Tags:
        - Key: Name
          Value: !Sub ${StackKey}-${Environment}-public-subnet-2

  PublicSubnet3:
    Type: "AWS::EC2::Subnet"
    Condition: isProduction
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref SubnetZone3
      CidrBlock: !Ref PublicSubnet3CIDR
      Tags:
        - Key: Name
          Value: !Sub ${StackKey}-${Environment}-public-subnet-3

  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref SubnetZone1
      CidrBlock: !Ref PrivateSubnet1CIDR
      Tags:
        - Key: Name
          Value: !Sub ${StackKey}-${Environment}-private-subnet-1

  PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref SubnetZone2
      CidrBlock: !Ref PrivateSubnet2CIDR
      Tags:
        - Key: Name
          Value: !Sub ${StackKey}-${Environment}-private-subnet-2
          
  PrivateSubnet3:
    Type: "AWS::EC2::Subnet"
    Condition: isProduction
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref SubnetZone3
      CidrBlock: !Ref PrivateSubnet3CIDR
      Tags:
        - Key: Name
          Value: !Sub ${StackKey}-${Environment}-private-subnet-3

  NAT1:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt [NATIP1, AllocationId]
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${StackKey}-${Environment}-public-nat-1
    DependsOn: InternetGatewayAttachment

  NAT2:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt [NATIP2, AllocationId]
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${StackKey}-${Environment}-public-nat-2
    DependsOn: InternetGatewayAttachment

  NAT2:
    Type: "AWS::EC2::NatGateway"
    Condition: isProduction
    Properties:
      AllocationId: !GetAtt [NATIP3, AllocationId]
      SubnetId: !Ref PublicSubnet3
      Tags:
        - Key: Name
          Value: !Sub ${StackKey}-${Environment}-public-nat-3
    DependsOn: InternetGatewayAttachment

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${StackKey}-${Environment}-public-route-table

  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRouteTable1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${StackKey}-${Environment}-private-route-table-1

  PrivateRouteTable2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${StackKey}-${Environment}-private-route-table-2
          
  PrivateRouteTable3:
    Type: "AWS::EC2::RouteTable"
    Condition: isProduction
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${StackKey}-${Environment}-private-route-table-3

  PrivateNATRoute1:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT1

  PrivateNATRoute2:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT2

  PrivateNATRoute3:
    Type: "AWS::EC2::Route"
    Condition: isProduction
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT3

  PublicSubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnetRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnetRouteTableAssociation3:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Condition: isProduction
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  PrivateSubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnetRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  PrivateSubnetRouteTableAssociation3:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Condition: isProduction
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      SubnetId: !Ref PrivateSubnet3

  PublicACL:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${StackKey}-${Environment}-public-network-acl

  PublicACLAllIn:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PublicACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0

  PublicACLAllOut:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PublicACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  PublicACLAssociation1:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      NetworkAclId: !Ref PublicACL
      SubnetId: !Ref PublicSubnet1

  PublicACLAssociation2:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      NetworkAclId: !Ref PublicACL
      SubnetId: !Ref PublicSubnet2

  PublicACLAssociation3:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Condition: isProduction
    Properties:
      NetworkAclId: !Ref PublicACL
      SubnetId: !Ref PublicSubnet3

  PrivateACL:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${StackKey}-${Environment}-private-network-acl

  PrivateACLVPCIn:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PrivateACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 10.0.0.0/16

  PrivateACLNATIn:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PrivateACL
      RuleNumber: 200
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  PrivateACLVPCOut:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PrivateACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  PrivateACLAssociation1:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      NetworkAclId: !Ref PrivateACL
      SubnetId: !Ref PrivateSubnet1

  PrivateACLAssociation2:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      NetworkAclId: !Ref PrivateACL
      SubnetId: !Ref PrivateSubnet2

  PrivateACLAssociation3:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Condition: isProduction
    Properties:
      NetworkAclId: !Ref PrivateACL
      SubnetId: !Ref PrivateSubnet3

  DNS:
    Type: "AWS::Route53::HostedZone"
    Properties:
      HostedZoneConfig:
        Comment: !Sub ${StackKey}-${Environment}-internal-zone
      Name: !Sub "${StackKey}-${Environment}.int"
      VPCs:
        - VPCId: !Ref VPC
          VPCRegion: !Ref "AWS::Region"

  ElasticSearchSericeLinkedRole:
    Type: AWS::IAM::ServiceLinkedRole
    Properties:
      AWSServiceName: es.amazonaws.com
      Description: Role for ES to access resources in the VPC

  JumpBoxSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub ${StackKey}-${Environment}-jumpbox-sg
      GroupDescription: Enables SSH Access to Jump Box
      VpcId: !ImportValue
        "Fn::Sub": ${StackKey}-${Environment}-VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 66.68.191.167/32
          Description: Javi Spectrum
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 98.97.80.213/32
          Description: Javi Starlink
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 66.68.191.167/32
          Description: Javi Spectrum
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 98.97.80.213/32
          Description: Javi Starlink

  JumpBoxEc2:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: true
      ImageId: !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", jump]
      InstanceType: !Ref JumpBoxInstanceType
      KeyName: !Ref JumpBoxKeyName
      Monitoring: true
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref JumpBoxSecurityGroup
          SubnetId: !ImportValue
            "Fn::Sub": ${StackKey}-${Environment}-PublicSubnet1
      SourceDestCheck: true
      Tags:
        - Key: Name
          Value: !Sub ${StackKey}-${Environment}-JumpBox

Outputs:
  VPC:
    Value: !Ref VPC
    Export:
      Name: !Sub ${StackKey}-${Environment}-VPC
  PublicSubnet1:
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${StackKey}-${Environment}-PublicSubnet1
  PublicSubnet2:
    Value: !Ref PublicSubnet2
    Condition: isProduction
    Export:
      Name: !Sub ${StackKey}-${Environment}-PublicSubnet2
  PublicSubnet3:
    Value: !Ref PublicSubnet2
    Condition: isProduction
    Export:
      Name: !Sub ${StackKey}-${Environment}-PublicSubnet3
  PrivateSubnet1:
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${StackKey}-${Environment}-PrivateSubnet1
  PrivateSubnet2:
    Value: !Ref PrivateSubnet2
    Condition: isProduction
    Export:
      Name: !Sub ${StackKey}-${Environment}-PrivateSubnet2
  PrivateSubnet3:
    Value: !Ref PrivateSubnet3
    Condition: isProduction
    Export:
      Name: !Sub ${StackKey}-${Environment}-PrivateSubnet3
  DNSZone:
    Value: !Ref DNS
    Export:
      Name: !Sub ${StackKey}-${Environment}-DNSZone
  NATIP1:
    Value: !GetAtt [NATIP1, AllocationId]
    Export:
      Name: !Sub ${StackKey}-${Environment}-NATIP1
  NATIP2:
    Value: !GetAtt [NATIP2, AllocationId]
    Export:
      Name: !Sub ${StackKey}-${Environment}-NATIP2
  NATIP3:
    Condition: isProduction
    Value: !GetAtt [NATIP3, AllocationId]
    Export:
      Name: !Sub ${StackKey}-${Environment}-NATIP3
